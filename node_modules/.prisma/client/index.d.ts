
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model cliente
 * 
 */
export type cliente = $Result.DefaultSelection<Prisma.$clientePayload>
/**
 * Model carro
 * 
 */
export type carro = $Result.DefaultSelection<Prisma.$carroPayload>
/**
 * Model aluguel
 * 
 */
export type aluguel = $Result.DefaultSelection<Prisma.$aluguelPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Status: {
  Alugado: 'Alugado',
  Disponivel: 'Disponivel'
};

export type Status = (typeof Status)[keyof typeof Status]

}

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Clientes
 * const clientes = await prisma.cliente.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Clientes
   * const clientes = await prisma.cliente.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.cliente`: Exposes CRUD operations for the **cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.clienteDelegate<ExtArgs>;

  /**
   * `prisma.carro`: Exposes CRUD operations for the **carro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carros
    * const carros = await prisma.carro.findMany()
    * ```
    */
  get carro(): Prisma.carroDelegate<ExtArgs>;

  /**
   * `prisma.aluguel`: Exposes CRUD operations for the **aluguel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Aluguels
    * const aluguels = await prisma.aluguel.findMany()
    * ```
    */
  get aluguel(): Prisma.aluguelDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.17.0
   * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    cliente: 'cliente',
    carro: 'carro',
    aluguel: 'aluguel'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "cliente" | "carro" | "aluguel"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      cliente: {
        payload: Prisma.$clientePayload<ExtArgs>
        fields: Prisma.clienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.clienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.clienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientePayload>
          }
          findFirst: {
            args: Prisma.clienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.clienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientePayload>
          }
          findMany: {
            args: Prisma.clienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientePayload>[]
          }
          create: {
            args: Prisma.clienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientePayload>
          }
          createMany: {
            args: Prisma.clienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.clienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientePayload>
          }
          update: {
            args: Prisma.clienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientePayload>
          }
          deleteMany: {
            args: Prisma.clienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.clienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.clienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientePayload>
          }
          aggregate: {
            args: Prisma.ClienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCliente>
          }
          groupBy: {
            args: Prisma.clienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.clienteCountArgs<ExtArgs>
            result: $Utils.Optional<ClienteCountAggregateOutputType> | number
          }
        }
      }
      carro: {
        payload: Prisma.$carroPayload<ExtArgs>
        fields: Prisma.carroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.carroFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.carroFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carroPayload>
          }
          findFirst: {
            args: Prisma.carroFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.carroFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carroPayload>
          }
          findMany: {
            args: Prisma.carroFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carroPayload>[]
          }
          create: {
            args: Prisma.carroCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carroPayload>
          }
          createMany: {
            args: Prisma.carroCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.carroDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carroPayload>
          }
          update: {
            args: Prisma.carroUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carroPayload>
          }
          deleteMany: {
            args: Prisma.carroDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.carroUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.carroUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carroPayload>
          }
          aggregate: {
            args: Prisma.CarroAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCarro>
          }
          groupBy: {
            args: Prisma.carroGroupByArgs<ExtArgs>
            result: $Utils.Optional<CarroGroupByOutputType>[]
          }
          count: {
            args: Prisma.carroCountArgs<ExtArgs>
            result: $Utils.Optional<CarroCountAggregateOutputType> | number
          }
        }
      }
      aluguel: {
        payload: Prisma.$aluguelPayload<ExtArgs>
        fields: Prisma.aluguelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.aluguelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aluguelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.aluguelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aluguelPayload>
          }
          findFirst: {
            args: Prisma.aluguelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aluguelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.aluguelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aluguelPayload>
          }
          findMany: {
            args: Prisma.aluguelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aluguelPayload>[]
          }
          create: {
            args: Prisma.aluguelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aluguelPayload>
          }
          createMany: {
            args: Prisma.aluguelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.aluguelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aluguelPayload>
          }
          update: {
            args: Prisma.aluguelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aluguelPayload>
          }
          deleteMany: {
            args: Prisma.aluguelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.aluguelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.aluguelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aluguelPayload>
          }
          aggregate: {
            args: Prisma.AluguelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAluguel>
          }
          groupBy: {
            args: Prisma.aluguelGroupByArgs<ExtArgs>
            result: $Utils.Optional<AluguelGroupByOutputType>[]
          }
          count: {
            args: Prisma.aluguelCountArgs<ExtArgs>
            result: $Utils.Optional<AluguelCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model cliente
   */

  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    id_cliente: number | null
    cnh: number | null
  }

  export type ClienteSumAggregateOutputType = {
    id_cliente: number | null
    cnh: number | null
  }

  export type ClienteMinAggregateOutputType = {
    id_cliente: number | null
    nome: string | null
    cnh: number | null
  }

  export type ClienteMaxAggregateOutputType = {
    id_cliente: number | null
    nome: string | null
    cnh: number | null
  }

  export type ClienteCountAggregateOutputType = {
    id_cliente: number
    nome: number
    cnh: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    id_cliente?: true
    cnh?: true
  }

  export type ClienteSumAggregateInputType = {
    id_cliente?: true
    cnh?: true
  }

  export type ClienteMinAggregateInputType = {
    id_cliente?: true
    nome?: true
    cnh?: true
  }

  export type ClienteMaxAggregateInputType = {
    id_cliente?: true
    nome?: true
    cnh?: true
  }

  export type ClienteCountAggregateInputType = {
    id_cliente?: true
    nome?: true
    cnh?: true
    _all?: true
  }

  export type ClienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cliente to aggregate.
     */
    where?: clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: clienteOrderByWithRelationInput | clienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type clienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: clienteWhereInput
    orderBy?: clienteOrderByWithAggregationInput | clienteOrderByWithAggregationInput[]
    by: ClienteScalarFieldEnum[] | ClienteScalarFieldEnum
    having?: clienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }

  export type ClienteGroupByOutputType = {
    id_cliente: number
    nome: string
    cnh: number
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends clienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type clienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_cliente?: boolean
    nome?: boolean
    cnh?: boolean
  }, ExtArgs["result"]["cliente"]>


  export type clienteSelectScalar = {
    id_cliente?: boolean
    nome?: boolean
    cnh?: boolean
  }


  export type $clientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cliente"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id_cliente: number
      nome: string
      cnh: number
    }, ExtArgs["result"]["cliente"]>
    composites: {}
  }

  type clienteGetPayload<S extends boolean | null | undefined | clienteDefaultArgs> = $Result.GetResult<Prisma.$clientePayload, S>

  type clienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<clienteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface clienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cliente'], meta: { name: 'cliente' } }
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {clienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends clienteFindUniqueArgs>(args: SelectSubset<T, clienteFindUniqueArgs<ExtArgs>>): Prisma__clienteClient<$Result.GetResult<Prisma.$clientePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Cliente that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {clienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends clienteFindUniqueOrThrowArgs>(args: SelectSubset<T, clienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__clienteClient<$Result.GetResult<Prisma.$clientePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends clienteFindFirstArgs>(args?: SelectSubset<T, clienteFindFirstArgs<ExtArgs>>): Prisma__clienteClient<$Result.GetResult<Prisma.$clientePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Cliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends clienteFindFirstOrThrowArgs>(args?: SelectSubset<T, clienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__clienteClient<$Result.GetResult<Prisma.$clientePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `id_cliente`
     * const clienteWithId_clienteOnly = await prisma.cliente.findMany({ select: { id_cliente: true } })
     * 
     */
    findMany<T extends clienteFindManyArgs>(args?: SelectSubset<T, clienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$clientePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Cliente.
     * @param {clienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
     */
    create<T extends clienteCreateArgs>(args: SelectSubset<T, clienteCreateArgs<ExtArgs>>): Prisma__clienteClient<$Result.GetResult<Prisma.$clientePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Clientes.
     * @param {clienteCreateManyArgs} args - Arguments to create many Clientes.
     * @example
     * // Create many Clientes
     * const cliente = await prisma.cliente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends clienteCreateManyArgs>(args?: SelectSubset<T, clienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cliente.
     * @param {clienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
     */
    delete<T extends clienteDeleteArgs>(args: SelectSubset<T, clienteDeleteArgs<ExtArgs>>): Prisma__clienteClient<$Result.GetResult<Prisma.$clientePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Cliente.
     * @param {clienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends clienteUpdateArgs>(args: SelectSubset<T, clienteUpdateArgs<ExtArgs>>): Prisma__clienteClient<$Result.GetResult<Prisma.$clientePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Clientes.
     * @param {clienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends clienteDeleteManyArgs>(args?: SelectSubset<T, clienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends clienteUpdateManyArgs>(args: SelectSubset<T, clienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {clienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
     */
    upsert<T extends clienteUpsertArgs>(args: SelectSubset<T, clienteUpsertArgs<ExtArgs>>): Prisma__clienteClient<$Result.GetResult<Prisma.$clientePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends clienteCountArgs>(
      args?: Subset<T, clienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends clienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: clienteGroupByArgs['orderBy'] }
        : { orderBy?: clienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, clienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cliente model
   */
  readonly fields: clienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__clienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the cliente model
   */ 
  interface clienteFieldRefs {
    readonly id_cliente: FieldRef<"cliente", 'Int'>
    readonly nome: FieldRef<"cliente", 'String'>
    readonly cnh: FieldRef<"cliente", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * cliente findUnique
   */
  export type clienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
    /**
     * Filter, which cliente to fetch.
     */
    where: clienteWhereUniqueInput
  }

  /**
   * cliente findUniqueOrThrow
   */
  export type clienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
    /**
     * Filter, which cliente to fetch.
     */
    where: clienteWhereUniqueInput
  }

  /**
   * cliente findFirst
   */
  export type clienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
    /**
     * Filter, which cliente to fetch.
     */
    where?: clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: clienteOrderByWithRelationInput | clienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientes.
     */
    cursor?: clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * cliente findFirstOrThrow
   */
  export type clienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
    /**
     * Filter, which cliente to fetch.
     */
    where?: clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: clienteOrderByWithRelationInput | clienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientes.
     */
    cursor?: clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * cliente findMany
   */
  export type clienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where?: clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: clienteOrderByWithRelationInput | clienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clientes.
     */
    cursor?: clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * cliente create
   */
  export type clienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
    /**
     * The data needed to create a cliente.
     */
    data: XOR<clienteCreateInput, clienteUncheckedCreateInput>
  }

  /**
   * cliente createMany
   */
  export type clienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many clientes.
     */
    data: clienteCreateManyInput | clienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cliente update
   */
  export type clienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
    /**
     * The data needed to update a cliente.
     */
    data: XOR<clienteUpdateInput, clienteUncheckedUpdateInput>
    /**
     * Choose, which cliente to update.
     */
    where: clienteWhereUniqueInput
  }

  /**
   * cliente updateMany
   */
  export type clienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update clientes.
     */
    data: XOR<clienteUpdateManyMutationInput, clienteUncheckedUpdateManyInput>
    /**
     * Filter which clientes to update
     */
    where?: clienteWhereInput
  }

  /**
   * cliente upsert
   */
  export type clienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
    /**
     * The filter to search for the cliente to update in case it exists.
     */
    where: clienteWhereUniqueInput
    /**
     * In case the cliente found by the `where` argument doesn't exist, create a new cliente with this data.
     */
    create: XOR<clienteCreateInput, clienteUncheckedCreateInput>
    /**
     * In case the cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<clienteUpdateInput, clienteUncheckedUpdateInput>
  }

  /**
   * cliente delete
   */
  export type clienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
    /**
     * Filter which cliente to delete.
     */
    where: clienteWhereUniqueInput
  }

  /**
   * cliente deleteMany
   */
  export type clienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which clientes to delete
     */
    where?: clienteWhereInput
  }

  /**
   * cliente without action
   */
  export type clienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
  }


  /**
   * Model carro
   */

  export type AggregateCarro = {
    _count: CarroCountAggregateOutputType | null
    _avg: CarroAvgAggregateOutputType | null
    _sum: CarroSumAggregateOutputType | null
    _min: CarroMinAggregateOutputType | null
    _max: CarroMaxAggregateOutputType | null
  }

  export type CarroAvgAggregateOutputType = {
    id_carro: number | null
    valorAluguel: number | null
  }

  export type CarroSumAggregateOutputType = {
    id_carro: number | null
    valorAluguel: number | null
  }

  export type CarroMinAggregateOutputType = {
    id_carro: number | null
    placa: string | null
    chassi: string | null
    ano: Date | null
    modelo: string | null
    cor: string | null
    fabricante: string | null
    status: $Enums.Status | null
    valorAluguel: number | null
  }

  export type CarroMaxAggregateOutputType = {
    id_carro: number | null
    placa: string | null
    chassi: string | null
    ano: Date | null
    modelo: string | null
    cor: string | null
    fabricante: string | null
    status: $Enums.Status | null
    valorAluguel: number | null
  }

  export type CarroCountAggregateOutputType = {
    id_carro: number
    placa: number
    chassi: number
    ano: number
    modelo: number
    cor: number
    fabricante: number
    status: number
    valorAluguel: number
    _all: number
  }


  export type CarroAvgAggregateInputType = {
    id_carro?: true
    valorAluguel?: true
  }

  export type CarroSumAggregateInputType = {
    id_carro?: true
    valorAluguel?: true
  }

  export type CarroMinAggregateInputType = {
    id_carro?: true
    placa?: true
    chassi?: true
    ano?: true
    modelo?: true
    cor?: true
    fabricante?: true
    status?: true
    valorAluguel?: true
  }

  export type CarroMaxAggregateInputType = {
    id_carro?: true
    placa?: true
    chassi?: true
    ano?: true
    modelo?: true
    cor?: true
    fabricante?: true
    status?: true
    valorAluguel?: true
  }

  export type CarroCountAggregateInputType = {
    id_carro?: true
    placa?: true
    chassi?: true
    ano?: true
    modelo?: true
    cor?: true
    fabricante?: true
    status?: true
    valorAluguel?: true
    _all?: true
  }

  export type CarroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which carro to aggregate.
     */
    where?: carroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carros to fetch.
     */
    orderBy?: carroOrderByWithRelationInput | carroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: carroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned carros
    **/
    _count?: true | CarroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarroAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarroSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarroMaxAggregateInputType
  }

  export type GetCarroAggregateType<T extends CarroAggregateArgs> = {
        [P in keyof T & keyof AggregateCarro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarro[P]>
      : GetScalarType<T[P], AggregateCarro[P]>
  }




  export type carroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: carroWhereInput
    orderBy?: carroOrderByWithAggregationInput | carroOrderByWithAggregationInput[]
    by: CarroScalarFieldEnum[] | CarroScalarFieldEnum
    having?: carroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarroCountAggregateInputType | true
    _avg?: CarroAvgAggregateInputType
    _sum?: CarroSumAggregateInputType
    _min?: CarroMinAggregateInputType
    _max?: CarroMaxAggregateInputType
  }

  export type CarroGroupByOutputType = {
    id_carro: number
    placa: string
    chassi: string
    ano: Date
    modelo: string
    cor: string
    fabricante: string
    status: $Enums.Status
    valorAluguel: number
    _count: CarroCountAggregateOutputType | null
    _avg: CarroAvgAggregateOutputType | null
    _sum: CarroSumAggregateOutputType | null
    _min: CarroMinAggregateOutputType | null
    _max: CarroMaxAggregateOutputType | null
  }

  type GetCarroGroupByPayload<T extends carroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CarroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarroGroupByOutputType[P]>
            : GetScalarType<T[P], CarroGroupByOutputType[P]>
        }
      >
    >


  export type carroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_carro?: boolean
    placa?: boolean
    chassi?: boolean
    ano?: boolean
    modelo?: boolean
    cor?: boolean
    fabricante?: boolean
    status?: boolean
    valorAluguel?: boolean
  }, ExtArgs["result"]["carro"]>


  export type carroSelectScalar = {
    id_carro?: boolean
    placa?: boolean
    chassi?: boolean
    ano?: boolean
    modelo?: boolean
    cor?: boolean
    fabricante?: boolean
    status?: boolean
    valorAluguel?: boolean
  }


  export type $carroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "carro"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id_carro: number
      placa: string
      chassi: string
      ano: Date
      modelo: string
      cor: string
      fabricante: string
      status: $Enums.Status
      valorAluguel: number
    }, ExtArgs["result"]["carro"]>
    composites: {}
  }

  type carroGetPayload<S extends boolean | null | undefined | carroDefaultArgs> = $Result.GetResult<Prisma.$carroPayload, S>

  type carroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<carroFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CarroCountAggregateInputType | true
    }

  export interface carroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['carro'], meta: { name: 'carro' } }
    /**
     * Find zero or one Carro that matches the filter.
     * @param {carroFindUniqueArgs} args - Arguments to find a Carro
     * @example
     * // Get one Carro
     * const carro = await prisma.carro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends carroFindUniqueArgs>(args: SelectSubset<T, carroFindUniqueArgs<ExtArgs>>): Prisma__carroClient<$Result.GetResult<Prisma.$carroPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Carro that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {carroFindUniqueOrThrowArgs} args - Arguments to find a Carro
     * @example
     * // Get one Carro
     * const carro = await prisma.carro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends carroFindUniqueOrThrowArgs>(args: SelectSubset<T, carroFindUniqueOrThrowArgs<ExtArgs>>): Prisma__carroClient<$Result.GetResult<Prisma.$carroPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Carro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carroFindFirstArgs} args - Arguments to find a Carro
     * @example
     * // Get one Carro
     * const carro = await prisma.carro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends carroFindFirstArgs>(args?: SelectSubset<T, carroFindFirstArgs<ExtArgs>>): Prisma__carroClient<$Result.GetResult<Prisma.$carroPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Carro that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carroFindFirstOrThrowArgs} args - Arguments to find a Carro
     * @example
     * // Get one Carro
     * const carro = await prisma.carro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends carroFindFirstOrThrowArgs>(args?: SelectSubset<T, carroFindFirstOrThrowArgs<ExtArgs>>): Prisma__carroClient<$Result.GetResult<Prisma.$carroPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Carros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carros
     * const carros = await prisma.carro.findMany()
     * 
     * // Get first 10 Carros
     * const carros = await prisma.carro.findMany({ take: 10 })
     * 
     * // Only select the `id_carro`
     * const carroWithId_carroOnly = await prisma.carro.findMany({ select: { id_carro: true } })
     * 
     */
    findMany<T extends carroFindManyArgs>(args?: SelectSubset<T, carroFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$carroPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Carro.
     * @param {carroCreateArgs} args - Arguments to create a Carro.
     * @example
     * // Create one Carro
     * const Carro = await prisma.carro.create({
     *   data: {
     *     // ... data to create a Carro
     *   }
     * })
     * 
     */
    create<T extends carroCreateArgs>(args: SelectSubset<T, carroCreateArgs<ExtArgs>>): Prisma__carroClient<$Result.GetResult<Prisma.$carroPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Carros.
     * @param {carroCreateManyArgs} args - Arguments to create many Carros.
     * @example
     * // Create many Carros
     * const carro = await prisma.carro.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends carroCreateManyArgs>(args?: SelectSubset<T, carroCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Carro.
     * @param {carroDeleteArgs} args - Arguments to delete one Carro.
     * @example
     * // Delete one Carro
     * const Carro = await prisma.carro.delete({
     *   where: {
     *     // ... filter to delete one Carro
     *   }
     * })
     * 
     */
    delete<T extends carroDeleteArgs>(args: SelectSubset<T, carroDeleteArgs<ExtArgs>>): Prisma__carroClient<$Result.GetResult<Prisma.$carroPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Carro.
     * @param {carroUpdateArgs} args - Arguments to update one Carro.
     * @example
     * // Update one Carro
     * const carro = await prisma.carro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends carroUpdateArgs>(args: SelectSubset<T, carroUpdateArgs<ExtArgs>>): Prisma__carroClient<$Result.GetResult<Prisma.$carroPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Carros.
     * @param {carroDeleteManyArgs} args - Arguments to filter Carros to delete.
     * @example
     * // Delete a few Carros
     * const { count } = await prisma.carro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends carroDeleteManyArgs>(args?: SelectSubset<T, carroDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carros
     * const carro = await prisma.carro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends carroUpdateManyArgs>(args: SelectSubset<T, carroUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Carro.
     * @param {carroUpsertArgs} args - Arguments to update or create a Carro.
     * @example
     * // Update or create a Carro
     * const carro = await prisma.carro.upsert({
     *   create: {
     *     // ... data to create a Carro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Carro we want to update
     *   }
     * })
     */
    upsert<T extends carroUpsertArgs>(args: SelectSubset<T, carroUpsertArgs<ExtArgs>>): Prisma__carroClient<$Result.GetResult<Prisma.$carroPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Carros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carroCountArgs} args - Arguments to filter Carros to count.
     * @example
     * // Count the number of Carros
     * const count = await prisma.carro.count({
     *   where: {
     *     // ... the filter for the Carros we want to count
     *   }
     * })
    **/
    count<T extends carroCountArgs>(
      args?: Subset<T, carroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Carro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarroAggregateArgs>(args: Subset<T, CarroAggregateArgs>): Prisma.PrismaPromise<GetCarroAggregateType<T>>

    /**
     * Group by Carro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends carroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: carroGroupByArgs['orderBy'] }
        : { orderBy?: carroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, carroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the carro model
   */
  readonly fields: carroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for carro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__carroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the carro model
   */ 
  interface carroFieldRefs {
    readonly id_carro: FieldRef<"carro", 'Int'>
    readonly placa: FieldRef<"carro", 'String'>
    readonly chassi: FieldRef<"carro", 'String'>
    readonly ano: FieldRef<"carro", 'DateTime'>
    readonly modelo: FieldRef<"carro", 'String'>
    readonly cor: FieldRef<"carro", 'String'>
    readonly fabricante: FieldRef<"carro", 'String'>
    readonly status: FieldRef<"carro", 'Status'>
    readonly valorAluguel: FieldRef<"carro", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * carro findUnique
   */
  export type carroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
    /**
     * Filter, which carro to fetch.
     */
    where: carroWhereUniqueInput
  }

  /**
   * carro findUniqueOrThrow
   */
  export type carroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
    /**
     * Filter, which carro to fetch.
     */
    where: carroWhereUniqueInput
  }

  /**
   * carro findFirst
   */
  export type carroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
    /**
     * Filter, which carro to fetch.
     */
    where?: carroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carros to fetch.
     */
    orderBy?: carroOrderByWithRelationInput | carroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for carros.
     */
    cursor?: carroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of carros.
     */
    distinct?: CarroScalarFieldEnum | CarroScalarFieldEnum[]
  }

  /**
   * carro findFirstOrThrow
   */
  export type carroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
    /**
     * Filter, which carro to fetch.
     */
    where?: carroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carros to fetch.
     */
    orderBy?: carroOrderByWithRelationInput | carroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for carros.
     */
    cursor?: carroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of carros.
     */
    distinct?: CarroScalarFieldEnum | CarroScalarFieldEnum[]
  }

  /**
   * carro findMany
   */
  export type carroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
    /**
     * Filter, which carros to fetch.
     */
    where?: carroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carros to fetch.
     */
    orderBy?: carroOrderByWithRelationInput | carroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing carros.
     */
    cursor?: carroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carros.
     */
    skip?: number
    distinct?: CarroScalarFieldEnum | CarroScalarFieldEnum[]
  }

  /**
   * carro create
   */
  export type carroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
    /**
     * The data needed to create a carro.
     */
    data: XOR<carroCreateInput, carroUncheckedCreateInput>
  }

  /**
   * carro createMany
   */
  export type carroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many carros.
     */
    data: carroCreateManyInput | carroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * carro update
   */
  export type carroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
    /**
     * The data needed to update a carro.
     */
    data: XOR<carroUpdateInput, carroUncheckedUpdateInput>
    /**
     * Choose, which carro to update.
     */
    where: carroWhereUniqueInput
  }

  /**
   * carro updateMany
   */
  export type carroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update carros.
     */
    data: XOR<carroUpdateManyMutationInput, carroUncheckedUpdateManyInput>
    /**
     * Filter which carros to update
     */
    where?: carroWhereInput
  }

  /**
   * carro upsert
   */
  export type carroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
    /**
     * The filter to search for the carro to update in case it exists.
     */
    where: carroWhereUniqueInput
    /**
     * In case the carro found by the `where` argument doesn't exist, create a new carro with this data.
     */
    create: XOR<carroCreateInput, carroUncheckedCreateInput>
    /**
     * In case the carro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<carroUpdateInput, carroUncheckedUpdateInput>
  }

  /**
   * carro delete
   */
  export type carroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
    /**
     * Filter which carro to delete.
     */
    where: carroWhereUniqueInput
  }

  /**
   * carro deleteMany
   */
  export type carroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which carros to delete
     */
    where?: carroWhereInput
  }

  /**
   * carro without action
   */
  export type carroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
  }


  /**
   * Model aluguel
   */

  export type AggregateAluguel = {
    _count: AluguelCountAggregateOutputType | null
    _avg: AluguelAvgAggregateOutputType | null
    _sum: AluguelSumAggregateOutputType | null
    _min: AluguelMinAggregateOutputType | null
    _max: AluguelMaxAggregateOutputType | null
  }

  export type AluguelAvgAggregateOutputType = {
    id_aluguel: number | null
    id_cliente: number | null
    id_carro: number | null
  }

  export type AluguelSumAggregateOutputType = {
    id_aluguel: number | null
    id_cliente: number | null
    id_carro: number | null
  }

  export type AluguelMinAggregateOutputType = {
    id_aluguel: number | null
    id_cliente: number | null
    id_carro: number | null
  }

  export type AluguelMaxAggregateOutputType = {
    id_aluguel: number | null
    id_cliente: number | null
    id_carro: number | null
  }

  export type AluguelCountAggregateOutputType = {
    id_aluguel: number
    id_cliente: number
    id_carro: number
    _all: number
  }


  export type AluguelAvgAggregateInputType = {
    id_aluguel?: true
    id_cliente?: true
    id_carro?: true
  }

  export type AluguelSumAggregateInputType = {
    id_aluguel?: true
    id_cliente?: true
    id_carro?: true
  }

  export type AluguelMinAggregateInputType = {
    id_aluguel?: true
    id_cliente?: true
    id_carro?: true
  }

  export type AluguelMaxAggregateInputType = {
    id_aluguel?: true
    id_cliente?: true
    id_carro?: true
  }

  export type AluguelCountAggregateInputType = {
    id_aluguel?: true
    id_cliente?: true
    id_carro?: true
    _all?: true
  }

  export type AluguelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which aluguel to aggregate.
     */
    where?: aluguelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of aluguels to fetch.
     */
    orderBy?: aluguelOrderByWithRelationInput | aluguelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: aluguelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` aluguels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` aluguels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned aluguels
    **/
    _count?: true | AluguelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AluguelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AluguelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AluguelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AluguelMaxAggregateInputType
  }

  export type GetAluguelAggregateType<T extends AluguelAggregateArgs> = {
        [P in keyof T & keyof AggregateAluguel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAluguel[P]>
      : GetScalarType<T[P], AggregateAluguel[P]>
  }




  export type aluguelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: aluguelWhereInput
    orderBy?: aluguelOrderByWithAggregationInput | aluguelOrderByWithAggregationInput[]
    by: AluguelScalarFieldEnum[] | AluguelScalarFieldEnum
    having?: aluguelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AluguelCountAggregateInputType | true
    _avg?: AluguelAvgAggregateInputType
    _sum?: AluguelSumAggregateInputType
    _min?: AluguelMinAggregateInputType
    _max?: AluguelMaxAggregateInputType
  }

  export type AluguelGroupByOutputType = {
    id_aluguel: number
    id_cliente: number
    id_carro: number
    _count: AluguelCountAggregateOutputType | null
    _avg: AluguelAvgAggregateOutputType | null
    _sum: AluguelSumAggregateOutputType | null
    _min: AluguelMinAggregateOutputType | null
    _max: AluguelMaxAggregateOutputType | null
  }

  type GetAluguelGroupByPayload<T extends aluguelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AluguelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AluguelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AluguelGroupByOutputType[P]>
            : GetScalarType<T[P], AluguelGroupByOutputType[P]>
        }
      >
    >


  export type aluguelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_aluguel?: boolean
    id_cliente?: boolean
    id_carro?: boolean
  }, ExtArgs["result"]["aluguel"]>


  export type aluguelSelectScalar = {
    id_aluguel?: boolean
    id_cliente?: boolean
    id_carro?: boolean
  }


  export type $aluguelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "aluguel"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id_aluguel: number
      id_cliente: number
      id_carro: number
    }, ExtArgs["result"]["aluguel"]>
    composites: {}
  }

  type aluguelGetPayload<S extends boolean | null | undefined | aluguelDefaultArgs> = $Result.GetResult<Prisma.$aluguelPayload, S>

  type aluguelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<aluguelFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AluguelCountAggregateInputType | true
    }

  export interface aluguelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['aluguel'], meta: { name: 'aluguel' } }
    /**
     * Find zero or one Aluguel that matches the filter.
     * @param {aluguelFindUniqueArgs} args - Arguments to find a Aluguel
     * @example
     * // Get one Aluguel
     * const aluguel = await prisma.aluguel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends aluguelFindUniqueArgs>(args: SelectSubset<T, aluguelFindUniqueArgs<ExtArgs>>): Prisma__aluguelClient<$Result.GetResult<Prisma.$aluguelPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Aluguel that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {aluguelFindUniqueOrThrowArgs} args - Arguments to find a Aluguel
     * @example
     * // Get one Aluguel
     * const aluguel = await prisma.aluguel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends aluguelFindUniqueOrThrowArgs>(args: SelectSubset<T, aluguelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__aluguelClient<$Result.GetResult<Prisma.$aluguelPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Aluguel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aluguelFindFirstArgs} args - Arguments to find a Aluguel
     * @example
     * // Get one Aluguel
     * const aluguel = await prisma.aluguel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends aluguelFindFirstArgs>(args?: SelectSubset<T, aluguelFindFirstArgs<ExtArgs>>): Prisma__aluguelClient<$Result.GetResult<Prisma.$aluguelPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Aluguel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aluguelFindFirstOrThrowArgs} args - Arguments to find a Aluguel
     * @example
     * // Get one Aluguel
     * const aluguel = await prisma.aluguel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends aluguelFindFirstOrThrowArgs>(args?: SelectSubset<T, aluguelFindFirstOrThrowArgs<ExtArgs>>): Prisma__aluguelClient<$Result.GetResult<Prisma.$aluguelPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Aluguels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aluguelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Aluguels
     * const aluguels = await prisma.aluguel.findMany()
     * 
     * // Get first 10 Aluguels
     * const aluguels = await prisma.aluguel.findMany({ take: 10 })
     * 
     * // Only select the `id_aluguel`
     * const aluguelWithId_aluguelOnly = await prisma.aluguel.findMany({ select: { id_aluguel: true } })
     * 
     */
    findMany<T extends aluguelFindManyArgs>(args?: SelectSubset<T, aluguelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$aluguelPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Aluguel.
     * @param {aluguelCreateArgs} args - Arguments to create a Aluguel.
     * @example
     * // Create one Aluguel
     * const Aluguel = await prisma.aluguel.create({
     *   data: {
     *     // ... data to create a Aluguel
     *   }
     * })
     * 
     */
    create<T extends aluguelCreateArgs>(args: SelectSubset<T, aluguelCreateArgs<ExtArgs>>): Prisma__aluguelClient<$Result.GetResult<Prisma.$aluguelPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Aluguels.
     * @param {aluguelCreateManyArgs} args - Arguments to create many Aluguels.
     * @example
     * // Create many Aluguels
     * const aluguel = await prisma.aluguel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends aluguelCreateManyArgs>(args?: SelectSubset<T, aluguelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Aluguel.
     * @param {aluguelDeleteArgs} args - Arguments to delete one Aluguel.
     * @example
     * // Delete one Aluguel
     * const Aluguel = await prisma.aluguel.delete({
     *   where: {
     *     // ... filter to delete one Aluguel
     *   }
     * })
     * 
     */
    delete<T extends aluguelDeleteArgs>(args: SelectSubset<T, aluguelDeleteArgs<ExtArgs>>): Prisma__aluguelClient<$Result.GetResult<Prisma.$aluguelPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Aluguel.
     * @param {aluguelUpdateArgs} args - Arguments to update one Aluguel.
     * @example
     * // Update one Aluguel
     * const aluguel = await prisma.aluguel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends aluguelUpdateArgs>(args: SelectSubset<T, aluguelUpdateArgs<ExtArgs>>): Prisma__aluguelClient<$Result.GetResult<Prisma.$aluguelPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Aluguels.
     * @param {aluguelDeleteManyArgs} args - Arguments to filter Aluguels to delete.
     * @example
     * // Delete a few Aluguels
     * const { count } = await prisma.aluguel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends aluguelDeleteManyArgs>(args?: SelectSubset<T, aluguelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Aluguels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aluguelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Aluguels
     * const aluguel = await prisma.aluguel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends aluguelUpdateManyArgs>(args: SelectSubset<T, aluguelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Aluguel.
     * @param {aluguelUpsertArgs} args - Arguments to update or create a Aluguel.
     * @example
     * // Update or create a Aluguel
     * const aluguel = await prisma.aluguel.upsert({
     *   create: {
     *     // ... data to create a Aluguel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Aluguel we want to update
     *   }
     * })
     */
    upsert<T extends aluguelUpsertArgs>(args: SelectSubset<T, aluguelUpsertArgs<ExtArgs>>): Prisma__aluguelClient<$Result.GetResult<Prisma.$aluguelPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Aluguels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aluguelCountArgs} args - Arguments to filter Aluguels to count.
     * @example
     * // Count the number of Aluguels
     * const count = await prisma.aluguel.count({
     *   where: {
     *     // ... the filter for the Aluguels we want to count
     *   }
     * })
    **/
    count<T extends aluguelCountArgs>(
      args?: Subset<T, aluguelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AluguelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Aluguel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AluguelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AluguelAggregateArgs>(args: Subset<T, AluguelAggregateArgs>): Prisma.PrismaPromise<GetAluguelAggregateType<T>>

    /**
     * Group by Aluguel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aluguelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends aluguelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: aluguelGroupByArgs['orderBy'] }
        : { orderBy?: aluguelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, aluguelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAluguelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the aluguel model
   */
  readonly fields: aluguelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for aluguel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__aluguelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the aluguel model
   */ 
  interface aluguelFieldRefs {
    readonly id_aluguel: FieldRef<"aluguel", 'Int'>
    readonly id_cliente: FieldRef<"aluguel", 'Int'>
    readonly id_carro: FieldRef<"aluguel", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * aluguel findUnique
   */
  export type aluguelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aluguel
     */
    select?: aluguelSelect<ExtArgs> | null
    /**
     * Filter, which aluguel to fetch.
     */
    where: aluguelWhereUniqueInput
  }

  /**
   * aluguel findUniqueOrThrow
   */
  export type aluguelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aluguel
     */
    select?: aluguelSelect<ExtArgs> | null
    /**
     * Filter, which aluguel to fetch.
     */
    where: aluguelWhereUniqueInput
  }

  /**
   * aluguel findFirst
   */
  export type aluguelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aluguel
     */
    select?: aluguelSelect<ExtArgs> | null
    /**
     * Filter, which aluguel to fetch.
     */
    where?: aluguelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of aluguels to fetch.
     */
    orderBy?: aluguelOrderByWithRelationInput | aluguelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for aluguels.
     */
    cursor?: aluguelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` aluguels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` aluguels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of aluguels.
     */
    distinct?: AluguelScalarFieldEnum | AluguelScalarFieldEnum[]
  }

  /**
   * aluguel findFirstOrThrow
   */
  export type aluguelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aluguel
     */
    select?: aluguelSelect<ExtArgs> | null
    /**
     * Filter, which aluguel to fetch.
     */
    where?: aluguelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of aluguels to fetch.
     */
    orderBy?: aluguelOrderByWithRelationInput | aluguelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for aluguels.
     */
    cursor?: aluguelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` aluguels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` aluguels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of aluguels.
     */
    distinct?: AluguelScalarFieldEnum | AluguelScalarFieldEnum[]
  }

  /**
   * aluguel findMany
   */
  export type aluguelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aluguel
     */
    select?: aluguelSelect<ExtArgs> | null
    /**
     * Filter, which aluguels to fetch.
     */
    where?: aluguelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of aluguels to fetch.
     */
    orderBy?: aluguelOrderByWithRelationInput | aluguelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing aluguels.
     */
    cursor?: aluguelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` aluguels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` aluguels.
     */
    skip?: number
    distinct?: AluguelScalarFieldEnum | AluguelScalarFieldEnum[]
  }

  /**
   * aluguel create
   */
  export type aluguelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aluguel
     */
    select?: aluguelSelect<ExtArgs> | null
    /**
     * The data needed to create a aluguel.
     */
    data: XOR<aluguelCreateInput, aluguelUncheckedCreateInput>
  }

  /**
   * aluguel createMany
   */
  export type aluguelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many aluguels.
     */
    data: aluguelCreateManyInput | aluguelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * aluguel update
   */
  export type aluguelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aluguel
     */
    select?: aluguelSelect<ExtArgs> | null
    /**
     * The data needed to update a aluguel.
     */
    data: XOR<aluguelUpdateInput, aluguelUncheckedUpdateInput>
    /**
     * Choose, which aluguel to update.
     */
    where: aluguelWhereUniqueInput
  }

  /**
   * aluguel updateMany
   */
  export type aluguelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update aluguels.
     */
    data: XOR<aluguelUpdateManyMutationInput, aluguelUncheckedUpdateManyInput>
    /**
     * Filter which aluguels to update
     */
    where?: aluguelWhereInput
  }

  /**
   * aluguel upsert
   */
  export type aluguelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aluguel
     */
    select?: aluguelSelect<ExtArgs> | null
    /**
     * The filter to search for the aluguel to update in case it exists.
     */
    where: aluguelWhereUniqueInput
    /**
     * In case the aluguel found by the `where` argument doesn't exist, create a new aluguel with this data.
     */
    create: XOR<aluguelCreateInput, aluguelUncheckedCreateInput>
    /**
     * In case the aluguel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<aluguelUpdateInput, aluguelUncheckedUpdateInput>
  }

  /**
   * aluguel delete
   */
  export type aluguelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aluguel
     */
    select?: aluguelSelect<ExtArgs> | null
    /**
     * Filter which aluguel to delete.
     */
    where: aluguelWhereUniqueInput
  }

  /**
   * aluguel deleteMany
   */
  export type aluguelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which aluguels to delete
     */
    where?: aluguelWhereInput
  }

  /**
   * aluguel without action
   */
  export type aluguelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aluguel
     */
    select?: aluguelSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ClienteScalarFieldEnum: {
    id_cliente: 'id_cliente',
    nome: 'nome',
    cnh: 'cnh'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const CarroScalarFieldEnum: {
    id_carro: 'id_carro',
    placa: 'placa',
    chassi: 'chassi',
    ano: 'ano',
    modelo: 'modelo',
    cor: 'cor',
    fabricante: 'fabricante',
    status: 'status',
    valorAluguel: 'valorAluguel'
  };

  export type CarroScalarFieldEnum = (typeof CarroScalarFieldEnum)[keyof typeof CarroScalarFieldEnum]


  export const AluguelScalarFieldEnum: {
    id_aluguel: 'id_aluguel',
    id_cliente: 'id_cliente',
    id_carro: 'id_carro'
  };

  export type AluguelScalarFieldEnum = (typeof AluguelScalarFieldEnum)[keyof typeof AluguelScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type clienteWhereInput = {
    AND?: clienteWhereInput | clienteWhereInput[]
    OR?: clienteWhereInput[]
    NOT?: clienteWhereInput | clienteWhereInput[]
    id_cliente?: IntFilter<"cliente"> | number
    nome?: StringFilter<"cliente"> | string
    cnh?: IntFilter<"cliente"> | number
  }

  export type clienteOrderByWithRelationInput = {
    id_cliente?: SortOrder
    nome?: SortOrder
    cnh?: SortOrder
  }

  export type clienteWhereUniqueInput = Prisma.AtLeast<{
    id_cliente?: number
    AND?: clienteWhereInput | clienteWhereInput[]
    OR?: clienteWhereInput[]
    NOT?: clienteWhereInput | clienteWhereInput[]
    nome?: StringFilter<"cliente"> | string
    cnh?: IntFilter<"cliente"> | number
  }, "id_cliente">

  export type clienteOrderByWithAggregationInput = {
    id_cliente?: SortOrder
    nome?: SortOrder
    cnh?: SortOrder
    _count?: clienteCountOrderByAggregateInput
    _avg?: clienteAvgOrderByAggregateInput
    _max?: clienteMaxOrderByAggregateInput
    _min?: clienteMinOrderByAggregateInput
    _sum?: clienteSumOrderByAggregateInput
  }

  export type clienteScalarWhereWithAggregatesInput = {
    AND?: clienteScalarWhereWithAggregatesInput | clienteScalarWhereWithAggregatesInput[]
    OR?: clienteScalarWhereWithAggregatesInput[]
    NOT?: clienteScalarWhereWithAggregatesInput | clienteScalarWhereWithAggregatesInput[]
    id_cliente?: IntWithAggregatesFilter<"cliente"> | number
    nome?: StringWithAggregatesFilter<"cliente"> | string
    cnh?: IntWithAggregatesFilter<"cliente"> | number
  }

  export type carroWhereInput = {
    AND?: carroWhereInput | carroWhereInput[]
    OR?: carroWhereInput[]
    NOT?: carroWhereInput | carroWhereInput[]
    id_carro?: IntFilter<"carro"> | number
    placa?: StringFilter<"carro"> | string
    chassi?: StringFilter<"carro"> | string
    ano?: DateTimeFilter<"carro"> | Date | string
    modelo?: StringFilter<"carro"> | string
    cor?: StringFilter<"carro"> | string
    fabricante?: StringFilter<"carro"> | string
    status?: EnumStatusFilter<"carro"> | $Enums.Status
    valorAluguel?: FloatFilter<"carro"> | number
  }

  export type carroOrderByWithRelationInput = {
    id_carro?: SortOrder
    placa?: SortOrder
    chassi?: SortOrder
    ano?: SortOrder
    modelo?: SortOrder
    cor?: SortOrder
    fabricante?: SortOrder
    status?: SortOrder
    valorAluguel?: SortOrder
  }

  export type carroWhereUniqueInput = Prisma.AtLeast<{
    id_carro?: number
    AND?: carroWhereInput | carroWhereInput[]
    OR?: carroWhereInput[]
    NOT?: carroWhereInput | carroWhereInput[]
    placa?: StringFilter<"carro"> | string
    chassi?: StringFilter<"carro"> | string
    ano?: DateTimeFilter<"carro"> | Date | string
    modelo?: StringFilter<"carro"> | string
    cor?: StringFilter<"carro"> | string
    fabricante?: StringFilter<"carro"> | string
    status?: EnumStatusFilter<"carro"> | $Enums.Status
    valorAluguel?: FloatFilter<"carro"> | number
  }, "id_carro">

  export type carroOrderByWithAggregationInput = {
    id_carro?: SortOrder
    placa?: SortOrder
    chassi?: SortOrder
    ano?: SortOrder
    modelo?: SortOrder
    cor?: SortOrder
    fabricante?: SortOrder
    status?: SortOrder
    valorAluguel?: SortOrder
    _count?: carroCountOrderByAggregateInput
    _avg?: carroAvgOrderByAggregateInput
    _max?: carroMaxOrderByAggregateInput
    _min?: carroMinOrderByAggregateInput
    _sum?: carroSumOrderByAggregateInput
  }

  export type carroScalarWhereWithAggregatesInput = {
    AND?: carroScalarWhereWithAggregatesInput | carroScalarWhereWithAggregatesInput[]
    OR?: carroScalarWhereWithAggregatesInput[]
    NOT?: carroScalarWhereWithAggregatesInput | carroScalarWhereWithAggregatesInput[]
    id_carro?: IntWithAggregatesFilter<"carro"> | number
    placa?: StringWithAggregatesFilter<"carro"> | string
    chassi?: StringWithAggregatesFilter<"carro"> | string
    ano?: DateTimeWithAggregatesFilter<"carro"> | Date | string
    modelo?: StringWithAggregatesFilter<"carro"> | string
    cor?: StringWithAggregatesFilter<"carro"> | string
    fabricante?: StringWithAggregatesFilter<"carro"> | string
    status?: EnumStatusWithAggregatesFilter<"carro"> | $Enums.Status
    valorAluguel?: FloatWithAggregatesFilter<"carro"> | number
  }

  export type aluguelWhereInput = {
    AND?: aluguelWhereInput | aluguelWhereInput[]
    OR?: aluguelWhereInput[]
    NOT?: aluguelWhereInput | aluguelWhereInput[]
    id_aluguel?: IntFilter<"aluguel"> | number
    id_cliente?: IntFilter<"aluguel"> | number
    id_carro?: IntFilter<"aluguel"> | number
  }

  export type aluguelOrderByWithRelationInput = {
    id_aluguel?: SortOrder
    id_cliente?: SortOrder
    id_carro?: SortOrder
  }

  export type aluguelWhereUniqueInput = Prisma.AtLeast<{
    id_aluguel?: number
    AND?: aluguelWhereInput | aluguelWhereInput[]
    OR?: aluguelWhereInput[]
    NOT?: aluguelWhereInput | aluguelWhereInput[]
    id_cliente?: IntFilter<"aluguel"> | number
    id_carro?: IntFilter<"aluguel"> | number
  }, "id_aluguel">

  export type aluguelOrderByWithAggregationInput = {
    id_aluguel?: SortOrder
    id_cliente?: SortOrder
    id_carro?: SortOrder
    _count?: aluguelCountOrderByAggregateInput
    _avg?: aluguelAvgOrderByAggregateInput
    _max?: aluguelMaxOrderByAggregateInput
    _min?: aluguelMinOrderByAggregateInput
    _sum?: aluguelSumOrderByAggregateInput
  }

  export type aluguelScalarWhereWithAggregatesInput = {
    AND?: aluguelScalarWhereWithAggregatesInput | aluguelScalarWhereWithAggregatesInput[]
    OR?: aluguelScalarWhereWithAggregatesInput[]
    NOT?: aluguelScalarWhereWithAggregatesInput | aluguelScalarWhereWithAggregatesInput[]
    id_aluguel?: IntWithAggregatesFilter<"aluguel"> | number
    id_cliente?: IntWithAggregatesFilter<"aluguel"> | number
    id_carro?: IntWithAggregatesFilter<"aluguel"> | number
  }

  export type clienteCreateInput = {
    id_cliente: number
    nome: string
    cnh: number
  }

  export type clienteUncheckedCreateInput = {
    id_cliente: number
    nome: string
    cnh: number
  }

  export type clienteUpdateInput = {
    id_cliente?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cnh?: IntFieldUpdateOperationsInput | number
  }

  export type clienteUncheckedUpdateInput = {
    id_cliente?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cnh?: IntFieldUpdateOperationsInput | number
  }

  export type clienteCreateManyInput = {
    id_cliente: number
    nome: string
    cnh: number
  }

  export type clienteUpdateManyMutationInput = {
    id_cliente?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cnh?: IntFieldUpdateOperationsInput | number
  }

  export type clienteUncheckedUpdateManyInput = {
    id_cliente?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cnh?: IntFieldUpdateOperationsInput | number
  }

  export type carroCreateInput = {
    id_carro: number
    placa: string
    chassi: string
    ano: Date | string
    modelo: string
    cor: string
    fabricante: string
    status: $Enums.Status
    valorAluguel: number
  }

  export type carroUncheckedCreateInput = {
    id_carro: number
    placa: string
    chassi: string
    ano: Date | string
    modelo: string
    cor: string
    fabricante: string
    status: $Enums.Status
    valorAluguel: number
  }

  export type carroUpdateInput = {
    id_carro?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    ano?: DateTimeFieldUpdateOperationsInput | Date | string
    modelo?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    fabricante?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    valorAluguel?: FloatFieldUpdateOperationsInput | number
  }

  export type carroUncheckedUpdateInput = {
    id_carro?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    ano?: DateTimeFieldUpdateOperationsInput | Date | string
    modelo?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    fabricante?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    valorAluguel?: FloatFieldUpdateOperationsInput | number
  }

  export type carroCreateManyInput = {
    id_carro: number
    placa: string
    chassi: string
    ano: Date | string
    modelo: string
    cor: string
    fabricante: string
    status: $Enums.Status
    valorAluguel: number
  }

  export type carroUpdateManyMutationInput = {
    id_carro?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    ano?: DateTimeFieldUpdateOperationsInput | Date | string
    modelo?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    fabricante?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    valorAluguel?: FloatFieldUpdateOperationsInput | number
  }

  export type carroUncheckedUpdateManyInput = {
    id_carro?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    ano?: DateTimeFieldUpdateOperationsInput | Date | string
    modelo?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    fabricante?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    valorAluguel?: FloatFieldUpdateOperationsInput | number
  }

  export type aluguelCreateInput = {
    id_aluguel: number
    id_cliente: number
    id_carro: number
  }

  export type aluguelUncheckedCreateInput = {
    id_aluguel: number
    id_cliente: number
    id_carro: number
  }

  export type aluguelUpdateInput = {
    id_aluguel?: IntFieldUpdateOperationsInput | number
    id_cliente?: IntFieldUpdateOperationsInput | number
    id_carro?: IntFieldUpdateOperationsInput | number
  }

  export type aluguelUncheckedUpdateInput = {
    id_aluguel?: IntFieldUpdateOperationsInput | number
    id_cliente?: IntFieldUpdateOperationsInput | number
    id_carro?: IntFieldUpdateOperationsInput | number
  }

  export type aluguelCreateManyInput = {
    id_aluguel: number
    id_cliente: number
    id_carro: number
  }

  export type aluguelUpdateManyMutationInput = {
    id_aluguel?: IntFieldUpdateOperationsInput | number
    id_cliente?: IntFieldUpdateOperationsInput | number
    id_carro?: IntFieldUpdateOperationsInput | number
  }

  export type aluguelUncheckedUpdateManyInput = {
    id_aluguel?: IntFieldUpdateOperationsInput | number
    id_cliente?: IntFieldUpdateOperationsInput | number
    id_carro?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type clienteCountOrderByAggregateInput = {
    id_cliente?: SortOrder
    nome?: SortOrder
    cnh?: SortOrder
  }

  export type clienteAvgOrderByAggregateInput = {
    id_cliente?: SortOrder
    cnh?: SortOrder
  }

  export type clienteMaxOrderByAggregateInput = {
    id_cliente?: SortOrder
    nome?: SortOrder
    cnh?: SortOrder
  }

  export type clienteMinOrderByAggregateInput = {
    id_cliente?: SortOrder
    nome?: SortOrder
    cnh?: SortOrder
  }

  export type clienteSumOrderByAggregateInput = {
    id_cliente?: SortOrder
    cnh?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type carroCountOrderByAggregateInput = {
    id_carro?: SortOrder
    placa?: SortOrder
    chassi?: SortOrder
    ano?: SortOrder
    modelo?: SortOrder
    cor?: SortOrder
    fabricante?: SortOrder
    status?: SortOrder
    valorAluguel?: SortOrder
  }

  export type carroAvgOrderByAggregateInput = {
    id_carro?: SortOrder
    valorAluguel?: SortOrder
  }

  export type carroMaxOrderByAggregateInput = {
    id_carro?: SortOrder
    placa?: SortOrder
    chassi?: SortOrder
    ano?: SortOrder
    modelo?: SortOrder
    cor?: SortOrder
    fabricante?: SortOrder
    status?: SortOrder
    valorAluguel?: SortOrder
  }

  export type carroMinOrderByAggregateInput = {
    id_carro?: SortOrder
    placa?: SortOrder
    chassi?: SortOrder
    ano?: SortOrder
    modelo?: SortOrder
    cor?: SortOrder
    fabricante?: SortOrder
    status?: SortOrder
    valorAluguel?: SortOrder
  }

  export type carroSumOrderByAggregateInput = {
    id_carro?: SortOrder
    valorAluguel?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type aluguelCountOrderByAggregateInput = {
    id_aluguel?: SortOrder
    id_cliente?: SortOrder
    id_carro?: SortOrder
  }

  export type aluguelAvgOrderByAggregateInput = {
    id_aluguel?: SortOrder
    id_cliente?: SortOrder
    id_carro?: SortOrder
  }

  export type aluguelMaxOrderByAggregateInput = {
    id_aluguel?: SortOrder
    id_cliente?: SortOrder
    id_carro?: SortOrder
  }

  export type aluguelMinOrderByAggregateInput = {
    id_aluguel?: SortOrder
    id_cliente?: SortOrder
    id_carro?: SortOrder
  }

  export type aluguelSumOrderByAggregateInput = {
    id_aluguel?: SortOrder
    id_cliente?: SortOrder
    id_carro?: SortOrder
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use clienteDefaultArgs instead
     */
    export type clienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = clienteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use carroDefaultArgs instead
     */
    export type carroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = carroDefaultArgs<ExtArgs>
    /**
     * @deprecated Use aluguelDefaultArgs instead
     */
    export type aluguelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = aluguelDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}